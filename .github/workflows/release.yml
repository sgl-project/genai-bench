name: Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Run release in dry mode"
        required: false
        default: "true"

jobs:
  release:
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install dependencies
        run: |
          uv pip install --system .
          uv pip install --system ".[dev,multi-cloud]"

      - name: Run tests
        run: |
          uv run pytest tests --cov --cov-report=term-missing -v
        timeout-minutes: 10

      - name: Check coverage threshold
        run: |
          uv run coverage report --fail-under=93

      - name: Read version from pyproject.toml
        id: projver
        run: |
          python - <<'PY' | tee /dev/stderr | awk -F= '/^version=/{print "version="$2}' >> "$GITHUB_OUTPUT"
          import tomllib, pathlib, sys
          data = tomllib.loads(pathlib.Path("pyproject.toml").read_text("utf-8"))
          print(f"version={data['project']['version']}")
          PY

      - name: Extract version from release tag (if exists)
        id: tagver
        run: |
          # use pyproject version
          echo "tag=v${{ steps.projver.outputs.version }}" >> $GITHUB_OUTPUT
          echo "version=${{ steps.projver.outputs.version }}" >> $GITHUB_OUTPUT

      - name: Debug - Show extracted versions
        run: |
          echo "::notice ::Tag version: ${{ steps.tagver.outputs.version }}"
          echo "::notice ::pyproject.toml version: ${{ steps.projver.outputs.version }}"
          echo "Raw tag value: ${{ github.event.release.tag_name }}"
          
      - name: Verify versions match
        run: |
          echo "Tag version:       ${{ steps.tagver.outputs.version }}"
          echo "pyproject version: ${{ steps.projver.outputs.version }}"
          if [ "${{ steps.tagver.outputs.version }}" != "${{ steps.projver.outputs.version }}" ]; then
            echo "::error ::Release tag (v${{ steps.tagver.outputs.version }}) must match pyproject.toml version (${{ steps.projver.outputs.version }}). Please ensure the tag matches 'v${{ steps.projver.outputs.version }}'"
            exit 1
          fi

      - name: Build package
        run: uv build

      - name: Publish to PyPI
        if: ${{ github.event_name == 'release' && inputs.dry_run != 'true' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

      # --- Docker publish ---
      - name: Set up QEMU (for multi-arch)
        if: ${{ inputs.dry_run != 'true' }}
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: ${{ inputs.dry_run != 'true' }}
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: ${{ inputs.dry_run != 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set GHCR namespace (lowercase)
        if: ${{ inputs.dry_run != 'true' }}
        run: echo "GHCR_NAMESPACE=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

      - name: Build and push Docker image (release)
        if: ${{ inputs.dry_run != 'true' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            PKG_VERSION=${{ steps.tagver.outputs.version }}
          tags: |
            ghcr.io/${{ env.GHCR_NAMESPACE }}/genai-bench:latest
            ghcr.io/${{ env.GHCR_NAMESPACE }}/genai-bench:${{ steps.tagver.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
