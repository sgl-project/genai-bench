name: Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to test (e.g., v0.0.3-rc.1)"
        required: true
        type: string

env:
  GHCR_NAMESPACE: ${{ github.repository_owner }}

jobs:
  release:
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install dependencies
        run: |
          uv pip install --system .
          uv pip install --system ".[dev,multi-cloud]"

      - name: Run tests
        run: |
          uv run pytest tests --cov --cov-report=term-missing -v
        timeout-minutes: 10

      - name: Check coverage threshold
        run: |
          uv run coverage report --fail-under=93

      - name: Extract version from tag (release or manual)
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ inputs.tag }}"
          else
            TAG="${{ github.event.release.tag_name }}"
          fi
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "version=${TAG#v}" >> $GITHUB_OUTPUT

      - name: Sync pyproject.toml version
        run: |
          python - <<'PY'
          import pathlib, re, os
          p = pathlib.Path("pyproject.toml")
          s = p.read_text(encoding="utf-8")
          ver = os.environ["VERSION"]
          s = re.sub(r'(?m)^(version\s*=\s*")[^"]+(")', rf'version = "{ver}"', s)
          p.write_text(s, encoding="utf-8")
          print("Updated pyproject.toml to", ver)
          PY
        env:
          VERSION: ${{ steps.version.outputs.version }}

      - name: Build package
        run: uv build

      - name: Publish to PyPI
        if: github.event_name == 'release'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Set up QEMU (for multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            PKG_VERSION=${{ steps.version.outputs.version }}
          tags: |
            ghcr.io/${{ env.GHCR_NAMESPACE }}/genai-bench:latest
            ghcr.io/${{ env.GHCR_NAMESPACE }}/genai-bench:${{ steps.version.outputs.tag }}
            ghcr.io/${{ env.GHCR_NAMESPACE }}/genai-bench:${{ steps.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
